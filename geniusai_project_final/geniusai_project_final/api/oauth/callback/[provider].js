import fetch from 'node-fetch'; import cookie from 'cookie'; import { supabase } from '../../_helpers/supabaseClient.js'; export default async function handler(req,res){ const provider = req.query.provider; const {code,state} = req.query; const cookies = cookie.parse(req.headers.cookie||''); if(!cookies.oauth_state || cookies.oauth_state!==state) return res.status(403).send('Invalid state'); try{ let profile={}; if(provider==='google'){ const tokenRes = await fetch('https://oauth2.googleapis.com/token',{method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: new URLSearchParams({code,client_id:process.env.GOOGLE_CLIENT_ID,client_secret:process.env.GOOGLE_CLIENT_SECRET,redirect_uri:`${process.env.OAUTH_REDIRECT_BASE}/google`,grant_type:'authorization_code'})}); const tokenJson = await tokenRes.json(); const infoRes = await fetch('https://openidconnect.googleapis.com/v1/userinfo',{headers:{Authorization:`Bearer ${tokenJson.access_token}`}}); profile = await infoRes.json(); } else if(provider==='linkedin'){ const tokenRes = await fetch('https://www.linkedin.com/oauth/v2/accessToken',{method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body: new URLSearchParams({grant_type:'authorization_code',code,redirect_uri:`${process.env.OAUTH_REDIRECT_BASE}/linkedin`,client_id:process.env.LINKEDIN_CLIENT_ID,client_secret:process.env.LINKEDIN_CLIENT_SECRET})}); const tokenJson = await tokenRes.json(); const profRes = await fetch('https://api.linkedin.com/v2/me',{headers:{Authorization:`Bearer ${tokenJson.access_token}`}}); const emailRes = await fetch('https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))',{headers:{Authorization:`Bearer ${tokenJson.access_token}`}}); const p = await profRes.json(); const e = await emailRes.json(); profile = {id:p.id, name:`${p.localizedFirstName||''} ${p.localizedLastName||''}`.trim(), email: e?.elements?.[0]?.['handle~']?.emailAddress}; } const email = profile.email; if(!email) return res.status(400).send('no email'); await supabase.from('registrations').upsert([{email, name: profile.name, oauth_provider: provider, oauth_id: profile.sub || profile.id}], {onConflict:'email'}); res.setHeader('Set-Cookie', `session=${Buffer.from(JSON.stringify({email})).toString('base64')}; HttpOnly; Path=/; Max-Age=604800; SameSite=Lax; Secure=${process.env.NODE_ENV==='production'}`); res.writeHead(302,{Location:'/onboarding.html'}); res.end(); }catch(e){ console.error(e); res.status(500).send('oauth error'); } }